{"ast":null,"code":"var _jsxFileName = \"/Users/rajeevkumar/Desktop/news/client/src/Componets/Other/NewsAriticalPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport ArticlePage from \"./ArticlePage\"; // Assuming ArticlePage is in the same directory\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ArticlePageRoute = () => {\n  _s();\n  const [articleData, setArticleData] = useState(null);\n  useEffect(() => {\n    const fetchNews = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/content\", {\n          method: \"GET\",\n          headers: {\n            \"Cache-Control\": \"no-cache\"\n          }\n        });\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n        const data = await response.json();\n        setArticleData(data); // Assume the data structure matches what ArticlePage expects\n      } catch (error) {\n        console.error(\"There was a problem with your fetch operation:\", error);\n      }\n    };\n    fetchNews();\n  }, []);\n\n  // Conditional rendering to handle loading state\n  if (!articleData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Now we use the fetched data to render the ArticlePage\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ArticlePage, {\n      title: articleData.title,\n      titleImage: articleData.title_image,\n      paragraphs: articleData.paragraphs,\n      images: articleData.images\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(ArticlePageRoute, \"G9QoxaT90vdEyFVjJ2bUleBYf4g=\");\n_c = ArticlePageRoute;\nexport default ArticlePageRoute;\nvar _c;\n$RefreshReg$(_c, \"ArticlePageRoute\");","map":{"version":3,"names":["React","useState","useEffect","ArticlePage","jsxDEV","_jsxDEV","ArticlePageRoute","_s","articleData","setArticleData","fetchNews","response","fetch","method","headers","ok","Error","data","json","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","title","titleImage","title_image","paragraphs","images","_c","$RefreshReg$"],"sources":["/Users/rajeevkumar/Desktop/news/client/src/Componets/Other/NewsAriticalPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport ArticlePage from \"./ArticlePage\"; // Assuming ArticlePage is in the same directory\n\nconst ArticlePageRoute = () => {\n  const [articleData, setArticleData] = useState(null);\n\n  useEffect(() => {\n    const fetchNews = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/content\", {\n          method: \"GET\",\n          headers: {\n            \"Cache-Control\": \"no-cache\", \n          },\n        });\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n        const data = await response.json();\n        setArticleData(data); // Assume the data structure matches what ArticlePage expects\n      } catch (error) {\n        console.error(\"There was a problem with your fetch operation:\", error);\n      }\n    };\n\n    fetchNews();\n  }, []);\n\n  // Conditional rendering to handle loading state\n  if (!articleData) {\n    return <div>Loading...</div>;\n  }\n\n  // Now we use the fetched data to render the ArticlePage\n  return (\n    <div>\n      <ArticlePage\n        title={articleData.title}\n        titleImage={articleData.title_image}\n        paragraphs={articleData.paragraphs}\n        images={articleData.images}\n      />\n    </div>\n  );\n};\n\nexport default ArticlePageRoute;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,eAAe,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzC,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAEpDC,SAAS,CAAC,MAAM;IACd,MAAMQ,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,EAAE;UAC5DC,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE;YACP,eAAe,EAAE;UACnB;QACF,CAAC,CAAC;QACF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAChD;QACA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;QAClCT,cAAc,CAACQ,IAAI,CAAC,CAAC,CAAC;MACxB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,gDAAgD,EAAEA,KAAK,CAAC;MACxE;IACF,CAAC;IAEDT,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,IAAI,CAACF,WAAW,EAAE;IAChB,oBAAOH,OAAA;MAAAgB,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;;EAEA;EACA,oBACEpB,OAAA;IAAAgB,QAAA,eACEhB,OAAA,CAACF,WAAW;MACVuB,KAAK,EAAElB,WAAW,CAACkB,KAAM;MACzBC,UAAU,EAAEnB,WAAW,CAACoB,WAAY;MACpCC,UAAU,EAAErB,WAAW,CAACqB,UAAW;MACnCC,MAAM,EAAEtB,WAAW,CAACsB;IAAO;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAClB,EAAA,CAzCID,gBAAgB;AAAAyB,EAAA,GAAhBzB,gBAAgB;AA2CtB,eAAeA,gBAAgB;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}