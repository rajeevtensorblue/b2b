{"ast":null,"code":"var _jsxFileName = \"/Users/rajeevkumar/Desktop/news/client/src/Componets/Other/NewsAriticalPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Define the styles object here or import from a separate CSS/JS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = {\n  articleContainer: {\n    margin: \"0 auto\",\n    padding: \"20px\",\n    maxWidth: \"800px\",\n    backgroundColor: \"#f5f5f5\",\n    color: \"#333\",\n    fontFamily: '\"Helvetica Neue\", Helvetica, Arial, sans-serif'\n  },\n  heading: {\n    fontSize: \"2em\",\n    fontWeight: \"bold\",\n    marginBottom: \"20px\"\n  },\n  paragraph: {\n    fontSize: \"1em\",\n    lineHeight: \"1.6\",\n    textAlign: \"justify\",\n    marginBottom: \"20px\"\n  },\n  image: {\n    maxWidth: \"100%\",\n    height: \"auto\",\n    marginBottom: \"20px\"\n  }\n};\nconst ArticlePageRoute = () => {\n  _s();\n  const [articleData, setArticleData] = useState({\n    title: '',\n    title_image: {\n      image_url: '',\n      _id: ''\n    },\n    paragraphs: [],\n    images: []\n  });\n  useEffect(() => {\n    const fetchNews = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/content\");\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n\n        // Check if the data has the required properties\n        if (data.title && data.title_image && Array.isArray(data.paragraphs) && Array.isArray(data.images)) {\n          setArticleData(data);\n        } else {\n          // Handle the case where the data doesn't match the expected structure\n          console.error(\"Data received does not match expected structure:\", data);\n        }\n      } catch (error) {\n        console.error(\"There was a problem with your fetch operation:\", error);\n      }\n    };\n    fetchNews();\n  }, []);\n\n  // Now we use the fetched data to render the ArticlePage\n  // We also check if paragraphs and images are arrays before rendering\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: articleData.paragraphs.length > 0 && articleData.images.length > 0 ? /*#__PURE__*/_jsxDEV(ArticlePage, {\n      title: articleData.title,\n      titleImage: articleData.title_image,\n      paragraphs: articleData.paragraphs,\n      images: articleData.images\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(ArticlePageRoute, \"a/8A8h4vFP5JQUUhgCyCGNyNci4=\");\n_c = ArticlePageRoute;\nexport default ArticlePageRoute;\nvar _c;\n$RefreshReg$(_c, \"ArticlePageRoute\");","map":{"version":3,"names":["React","useState","useEffect","PropTypes","jsxDEV","_jsxDEV","styles","articleContainer","margin","padding","maxWidth","backgroundColor","color","fontFamily","heading","fontSize","fontWeight","marginBottom","paragraph","lineHeight","textAlign","image","height","ArticlePageRoute","_s","articleData","setArticleData","title","title_image","image_url","_id","paragraphs","images","fetchNews","response","fetch","ok","Error","status","data","json","Array","isArray","console","error","children","length","ArticlePage","titleImage","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/rajeevkumar/Desktop/news/client/src/Componets/Other/NewsAriticalPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Define the styles object here or import from a separate CSS/JS file\nconst styles = {\n  articleContainer: {\n    margin: \"0 auto\",\n    padding: \"20px\",\n    maxWidth: \"800px\",\n    backgroundColor: \"#f5f5f5\",\n    color: \"#333\",\n    fontFamily: '\"Helvetica Neue\", Helvetica, Arial, sans-serif',\n  },\n  heading: {\n    fontSize: \"2em\",\n    fontWeight: \"bold\",\n    marginBottom: \"20px\",\n  },\n  paragraph: {\n    fontSize: \"1em\",\n    lineHeight: \"1.6\",\n    textAlign: \"justify\",\n    marginBottom: \"20px\",\n  },\n  image: {\n    maxWidth: \"100%\",\n    height: \"auto\",\n    marginBottom: \"20px\",\n  },\n};\nconst ArticlePageRoute = () => {\n  const [articleData, setArticleData] = useState({\n    title: '',\n    title_image: { image_url: '', _id: '' },\n    paragraphs: [],\n    images: []\n  });\n\n  useEffect(() => {\n    const fetchNews = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8000/content\");\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        \n        // Check if the data has the required properties\n        if (data.title && data.title_image && Array.isArray(data.paragraphs) && Array.isArray(data.images)) {\n          setArticleData(data);\n        } else {\n          // Handle the case where the data doesn't match the expected structure\n          console.error(\"Data received does not match expected structure:\", data);\n        }\n      } catch (error) {\n        console.error(\"There was a problem with your fetch operation:\", error);\n      }\n    };\n\n    fetchNews();\n  }, []);\n\n  // Now we use the fetched data to render the ArticlePage\n  // We also check if paragraphs and images are arrays before rendering\n  return (\n    <div>\n      {articleData.paragraphs.length > 0 && articleData.images.length > 0 ? (\n        <ArticlePage\n          title={articleData.title}\n          titleImage={articleData.title_image}\n          paragraphs={articleData.paragraphs}\n          images={articleData.images}\n        />\n      ) : (\n        <div>Loading...</div>\n      )}\n    </div>\n  );\n};\n\n\nexport default ArticlePageRoute;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}